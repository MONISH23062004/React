name: CI/CD - React Docker Image → ECR → EC2

on:
  push:
    branches: [main]

env:
  IMAGE_NAME: my-app
  ECR_REGISTRY: 495599773901.dkr.ecr.us-east-1.amazonaws.com
  ECR_REPO: my-app
  REGION: us-east-1

jobs:
  # JOB 1: Build & Push to ECR
  build-and-push:
    name: Build Docker Image & Push to ECR
    runs-on: ubuntu-latest

    steps:
      - name: Checkout source code
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build Docker image
        run: |
          docker build -t $IMAGE_NAME .
          docker tag $IMAGE_NAME:latest $ECR_REGISTRY/$ECR_REPO:latest

      - name: Push Docker image to ECR
        run: |
          docker push $ECR_REGISTRY/$ECR_REPO:latest

  # JOB 2: Deploy to EC2
  deploy:
    name: Deploy on EC2 from ECR
    runs-on: ubuntu-latest
    needs: build-and-push

    steps:
      - name: SSH to EC2 and deploy
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_KEY }}
          script: |
            # Login to ECR
            aws configure set aws_access_key_id ${{ secrets.AWS_ACCESS_KEY_ID }}
            aws configure set aws_secret_access_key ${{ secrets.AWS_SECRET_ACCESS_KEY }}
            aws configure set default.region ${{ env.REGION }}

            aws ecr get-login-password --region ${{ env.REGION }} \
              | docker login --username AWS --password-stdin $ECR_REGISTRY

            # Stop and remove existing container if running
            docker stop $IMAGE_NAME || true
            docker rm $IMAGE_NAME || true

            # Pull and run latest image
            docker pull $ECR_REGISTRY/$ECR_REPO:latest
            docker run -d -p 80:80 --name $IMAGE_NAME $ECR_REGISTRY/$ECR_REPO:latest
